Spring Security Model

	Spring Security defines a framework for security
	implemented using servlet filters in the background
			->servlet filter are used to pre-process/post-process web requests
			-> servlet filters can route web requests based on security logic
			->spring provides a bulk of security functionality with servlet filters
	two methods of securing an app : declarative and programmatic
	
	--> Spring security automatically secure all endpoints
	
	Default userid and password is : user and genereated_passwd in log
	
	--> Props for changing
	spring.security.user.name=tiger
	spring.security.user.password=tiger
	
	Authentication and Authorization way
		in-memory
		JDBC
		LDAP
		Custom/pluggable
		others
		

---> Security basis on roles
	
	algo for password- 
		noop -> plain text
		bcrypt-> encrypted
		
		
	Step for configuring security on role basis[Note after creating the below configuration, spring not read userid and password from properties file]
		1) Configure the user and roles in configuration class
		
		
		@Configuration
		public class DemoSecurityConfig{
		
			@Bean
			public InMemoryUserDetailsManager userDetailsManager(){
			
				UserDetails john = User.builder().
									username("john")
									.password("{noop}test123")
									.roles("EMPLOYEE")
									.build();
									
				UserDetails mary = User.builder().
									username("mary")
									.password("{noop}test123")
									.roles("EMPLOYEE","MANAGER")
									.build();
									
				UserDetails susan = User.builder().
									username("susan")
									.password("{noop}test123")
									.roles("EMPLOYEE","MANAGER","ADMIN")
									.build();
									
				return new InMemoryUserDetailsManager(john, mary, susan);
			}
		
		}
	
		2)Authorize Requests, need to add in configuration class
		
		@Bean
			public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
				
			  http.authorizeHttRequests( configurer -> 
				configurer.requestMatches(HttpMethod.GET,"/api/employees").hasRole("EMPLOYEE")
				requestMatches(HttpMethod.GET,"/api/employees/**").hasRole("EMPLOYEE")
				
				requestMatches(HttpMethod.GET,"/api/employees/**").hasAnyRole("EMPLOYEE","MANAGER")
				
				requestMatches(HttpMethod.DELETE,"/api/employees/**).hasRole("ADMIN")
				);
				
			  http.httpBasic(Customizer.withDefaults());
				
				http.csrf(csrf->csrf.disable());
			
			 return http.build();
			}
			
			


=============>
 JDBC Authentication
 
	--> Instead of HardCoded , we can have DB 
	
	Need to create two db, as per spring security format table
	
	1) Create SQL then table
	2) ADD Db support to Maven POM file
	3) Create JDBC properties file
	4) Update Spring Security configuration to use JDBC
	
	two tables
	
	users    
	username varchar(50)
	password varchar(50)
	enabled TINYINT(1)
	
	authorities
	username VARCHAR(50)
	authority VARCHAR(50)
	
	CREATE TABLE `users` (
		`username` varchar(50) NOT NULL,
		`password` varchar(50) NOT NULL,
		`enabled` tinyint NOT NULL,
		PRIMARY KEY (`username`)
		
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	
	CREATE TABLE `authorities` (
		`username` varchar(50) NOT NULL,
		`authority` varchar(50) NOT NULL,
		UNIQUE KEY `authorities_idx_1` (`username`,`authority`),
		CONSTRAINT `authorities_idfx_1`
		FOREIGN KEY (`username`)
		REFERENCES `users` (`username`)
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	
	Note: while inserting password , for plain text it should be  '{noop}pass_123'
	
	
	NOte : For Role entry, it should prefix with 'ROLE_MANAGER'
	
	Now, in spring connfiguratin file we have to write below code
	
	@configuration
	public class DemoSecurityConfig{
		@Bean
		public UserDetailsManager userDetailsManager(DataSource dataSource){
			return new JdbcUserDetailsManager(dataSource);
		
		}
	
	}
	
	
	
========================>

Bcrypt Password Encryption

	Generatee password from bcrypt generator
	
	--> Change the lenght of password 68 character
	====
	now  prefix {bcrypt} --> {its using a salt , its read from db... here decryption not happen}
		No Code change
		
		
=====================> 

Custom table

--In this,
	we have provide query to find user by username
	and provide to find authorities/roles by username


Eg Custom table
		members
			user_id
			pw
			active
		
		roles
			user_id
			role
		
		
	@configuration
	public class DemoSecurityConfig{
		@Bean
		public UserDetailsManager userDetailsManager(DataSource dataSource){
			JdbcUserDetailsManager userMng =  new JdbcUserDetailsManager(dataSource);
			userMng.setUserByusernameQuery("select user_id,pw,acitive from members user_id=?";
			userMng.setAuthoritiesByUsernameQuery("select uesr_id,role from roles where user_id=?");
			return userMng;
		
		}
	
	}
	
	--> enabel security logging for testing purpose
	
	logging.level.org.springframework.security=DEBUG
	