

Some Important Command related to Spring boot for Linux

--> for running the project. Enter inside the project and run below command
		./mvnw spring-boot:run

    for passing any arguments

  ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments="-Dserver.port=8081"
		
--> For making jar/war
		./mvnw clean package  or ./mvnw package
		
--> By default jar will be created , for War  change in main java class for servlet , change in pom xml for tomcat provided and packaging war


-> while running the project, if manual java path need to provide then
	export JAVA_HOME='java_directory'
	note: this will remain in one seesion only
	
===> To Turn off the Spring Banner , add below prop in application.properties file
	spring.main.banner-mode=
	
	to Reduct the logging level
	logging.level.root=warn
	
===> Course Notes

--> Adding a Rest Controller

   @RestController
    Above CLass Name
	
		@GeMapping("/")
			Above method Name	
				public String sayHello(){
					return "Hello World"; 
				}
				
--> Light Weight Development with Java POJOs(Plain Old Java Objects)
--> Dependecy injection to promote loose coupling
--> Minimize boilerplate Java Code



--> Core Container of Spring Boot 
	Beans
	Core
	SpEL
	Conntext
	
--> InfraStructure
	AOP
	Aspeccts
	Instrumentation
	Messaging
	
--> Data Access Layer
	JDBC 
	ORM    ->
	Transanction
	OXM  <--> JMS (Java Messaging Service)
	
--> Web Layer
	servlet
	WebSocker
	Web
	
--> Test Layer
	Unit
	Integration
	Mock

==> Folder structure

	project_folder
		pom.xml (Project object Model )
		src/main/java
		src/main/resources
		src/test
		target
		Maven Wrapper files -> mvnw.sh or mvnw.cmd  -> for linux and windows
		(If maven is installed in the system, then wrapper files are not required) - using this wrapper files, blugin code is added in pom xml file
===> pom.xml
		1. project Meta data
		2. depedencies
		3. plugins
		
===> groupid -- > organization reversion name
     artificatid --> project name
	 version --->  
	 combinely called as "GAV" 
	 SNAPSHOT -> it means active development
	 

==> application.properties file
	use for adding custom properties which can also be provided during run time explicitly
		
	eg.
	server.port=8090
	
	#custom
	custom.name=Tanmay
	
	
	--> can fetch in code as below	
			eg.
					@Value("${custom.name}")
					private String CustomName;
					
	Note: In jar , do not use src/main/webapps as it only beign used durig "war" packaging
	
	
=====> Actuator
	Exposes endpointes to monitor and manage the application
	--> Need to add depedency in the pom.xml file
	-->actutor/health --> shows the status of up 
	--> by Default /health is only exposed
	--> others like  /info  need to add in properties file --> 
	
		 management.endpoints.web.exposure.include=health,info
		 can also exlude
		 		# management.endpoints.web.exposure.exclude=health,info

		 management.info.env.enabled=true
		 info.app.name=
		 info.app.description=
		 info.app.version=
		 
		 
	-> /aduitevents
		/beans --> all beans  ,  > need to add security
		/mappings --> all request mapping
		/threaddump --> all threads running
		
	--> for exposing all endpoints
		management.endpoints.web.exposure.include=*
		
		Note: All enpoints are accesible publicly. We can add spring security depedency that restrict and ask for login (/health and /info will not ask)
			bydefault user  > "user" password -> print while running
		
		
		for adding manual user id password,
		, need to addin properties
			spring.security.user.name=
			spring.security.user.password=
	
	
====>application.properties
	--> Injecting custom properties in application properties
		team.name=Tanmay
		
	--> @Value("${team.name}")
		private String name;
		
	-->Categories of application properties
			core web security Data Actuator Integration DevTools Testing
	--> Core Properties
		 Eg. Logging and its level
		 
	--> Web
		server.port=
		server.servlet.contex-path=/myapp   --> every url start like ip/myapp
		
		
		server.servlet.session.timeout=15m -- > session timeout
	
	--> Actuator
		mains above
		chane contexxt path of actuator
		management.endpoints.web.base-path=/actuator
		
	-->Security Properties
		mention above
		Eg. spring.security.user=
		
	-->Data Properties
		JDBC 
		 
	
===>Inversion of Control
	-->Spring Conainter 
		it creates and manage the objects (Inversion of control)
		Inject Object Depedencies (Depedencies Injection)
					-->Injection Types: Construction Inject and Setter Injection

	--> Configuring method
		XML
		Java Annotations 
		Java Source Code
		
	
	--Spring AutoWiring->  @Component - Spring Bean and make availaible for Depedencies Injection
	
	1) Constructor Injection
		-----------------

		Create a interface  eg . Coach
			public interface Coach {
			
				String getDailyWorkout();
			}
		
		-------------------
		Create a implementation of Coach
		
			@Combonent -->> Add
			public Class CricketCoach implements Coach {
				
				@Override
				public String getDailyWorkout(){
					return "Practice fast bowling";
				}
			
			}
		
		 --------------------
			Create a RestController
			
			@RestController
				publi class DemoRest{
				
					private Coach myCoach;
					
					@Autowired --> it tells spring to inject a Depedency , if only one Contructor then Autowired is optional
					public DemoRest(Coach theCoach){
						myCoach = theCoach;
					}
					
					@GeMapping("dailyworkout")
					public String getDailyWorkout(){
						return myCoach.getDailyWorkout();
					}
				}
				
		-> Here DemoRest Constructor automatically injected by Spring framework
			it create a object of Coach 
					Coach theCoach = new CricketCoach();
			then add this in DemoRest
						DemoRest demoRest = new DemoRest(theCoach);
						
			==> Combonent Scanning  --> 
			   @SpringBootApplication  -> it enable three annotation 
			   -> @EnableAutoConfiguration
				> @ComponetnScan -> First scan same package then other packages, outside of the package will not scan
						Eg. 
						 if main java file kept in   "com.app.tanmay" 
						   then it will scan all packages of current packages and all inside it.
							but it will not scan  if any bean present in this "com.app.harsh"
	
							In this case , we have to explicitly list to scan  in @SpringBootApplication Annotations
								
								@SpringBootApplication(
										scanBasePackages={ "com.app.harsh" } 
									)
									
							
				-> @Configuration --> Able to register extra beans with @Bean or import other Config classes
				
		
	2) Setter Injection ==>
			
			
			Create a RestController
			Here instead of creating a construtor we will setCoach method
			@RestController
				publi class DemoRest{
				
					private Coach myCoach;
					
					@Autowired --> it tells spring to inject a Depedency , if only one Contructor then Autowired is optional and here we can give any method name
					public setCoach(Coach theCoach){
						myCoach = theCoach;
					}
					
					@GeMapping("dailyworkout")
					public String getDailyWorkout(){
						return myCoach.getDailyWorkout();
					}
				}
				
	 Which to use : 
			Contructor -> Use when we have reguired depedencies
			Setter -> use when we have optional depedencies
			
		-->
		 3) Field Injection -> There is third option also , that are not recommeded now.  No Method required, it make harder to unit test.
			
			@RestController
				publi class DemoRest{
					
					@Autowired   - > Field Injection
					private Coach myCoach;
		
					@GeMapping("dailyworkout")
					public String getDailyWorkout(){
						return myCoach.getDailyWorkout();
					}
				}
				

======> AutoWiring
			Inject a Coach Implementation
			Spring will scan @Component , any implements coach interface and then inject that
			
			In Case of multiple implements of same interface --> we have to use @Qualifier keyword-
			  like Coach have multiple like  CricketCoach , TennisCoach  ( Qualifier can access the bean with same name of class only first letter as lowercase)
			
				Eg . in Setter Injection,same we can do in Contructor Injection
				
				@RestController
				publi class DemoRest{
				
					private Coach myCoach;
					
					@Autowired --> it tells spring to inject a Depedency , if only one Contructor then Autowired is optional and here we can give any method name
					public setCoach(Qualifier("cricketCoach") Coach theCoach){
						myCoach = theCoach;
					}
					
					@GeMapping("dailyworkout")
					public String getDailyWorkout(){
						return myCoach.getDailyWorkout();
					}
				}
				
				
=====> @Primary Annotations 
		Add @Primary in the implemented Class , then no error will come if we have multiple implemented class and not using @Qualifier Annotations
		
		By Default , spring will return primary bean.
		still we can use @Qualifier annotation 
		
=====>Lazy Initiliazation
		By Default, Spring create the object of all classes having component scan. 
		Instead of creating all beans up front, we can specify Lazy Initiliazation
		-> Now it will initiliazed 
			It is needed for depedency injection
			or It is explicitly requested
			
		Need to add @Lazy Annotations  with @Component annotation for each class 
		
	or
	
		for whole project, need to add in application.properties
			spring.main.lazy-initializatoin=true
			
		Advantages -> fast startup if too many beans
		Disadvantes -> @RestController will not be created until requested	
						May not discover config issues
						
		
		Note: For Accessing class name in construtor	
				getClass().getSimpleName()
				
				
				
===== > Bean Scopes
		Default scope -> Singleton  ( Means , single object will be created and same will be refer by all over )
		
		Explicitly mention
		
		Wiht @Component
		@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)
		
		others  scopes
		prototype -> creates a new bean instance for each container request
		request -> for HTTP web requets, for web app only
		session -> for HTT Web session
		global-session -> forglobal HTTP Session
		
		
		
==> Bean Lifecycle

	-> Container started --> Bean Initiliazed --> Depedencies injected --> Internal spring Processing-> Custom init method (Ready for use
		container stoped-> custom destroy
		
	->We can add custom code during intiliazaiton 
		calling custom business logic
		setting up handles to resources (db socket file etc)
	-> custom code during bean destruction
		calling custom business logic
		cleanup up handles to resources (db socket file etc)
	  
	  Annotations to be use,used above any method to consider it
	@PostConstruct 
	@PreDestroy
	
		Create a implementation of Coach
		
			@Combonent -->> Add
			public Class CricketCoach implements Coach {
				
				@Override
				public String getDailyWorkout(){
					return "Practice fast bowling";
				}
				
				@PostConstruct
				public void doSomeStartupStuff(){
					Sysout.println("start up stuuff " + getClass().getSimpleName() );'
				}
				
				@PreDestroy
				public void doSomeStartupStuff(){
					Sysout.println("clean up stuuff before destroy" + getClass().getSimpleName() );'
				}
			
			}
			
			
Note: for prototype scoped beans , spring does not call the destroy method. Spring doest not manage the complete lifecycle of prototype beans

	Prototype beans are by default lazy-initialization
	



====> Configuring Beans with Java Code
		
		--> Create Bean configuration class  need to add @Configuration
		--> Define @Bean method to configure the bean
		--> inject bean to controller
		
		Instead of component why we create manual beans with @Beans
			becuase
				making an existing third-party class availaible to spring-framework
				We may not have access to the source code of third-party class but we want to make bean of it
        
		
		eg.
		
		@Configuration
		public class SportConfig{
		
			@Bean
			public Coach swimCoach(){  --> bean id will be same of method name , can be used by Qualifier annotation
				return new SwimCoach();  --> here inside of  SwimCoach() class , no annotation added , not required
			}
		
		}
		
		
		---
		
		@RestController
				publi class DemoRest{
				
					private Coach myCoach;
					
					@Autowired --> it tells spring to inject a Depedency , if only one Contructor then Autowired is optional and here we can give any method name
					public setCoach(Qualifier("swimCoach") Coach theCoach){
						myCoach = theCoach;
					}
					
					@GeMapping("dailyworkout")
					public String getDailyWorkout(){
						return myCoach.getDailyWorkout();
					}
				}
				
				
====================================================================
Hibernate 

	A framework for persisting / saving Java Objects in a database
	Benefits:
		Minimizes handles all low level of SQL 
		Minimizes the amount of JDBC Code 
		It provides object to Relational Mapping (ORM) - It maps the java object to a table
		
  JPA - - Jakarta Persistence API (JPA) ...previously Known as JAVA Persistence API
		--> standard API for Object-to-Relational-Mapping (ORM)	
		
		Hibernate -->  JPA Spect   <-- Ecliplse Link
		
	
	Eg. JPA
	Student st = new Student("John" , "Doe", "MCA"); --> create java object
	entityManager.persist(st) ; --> save it to DB
	int  id =1;
	Student stFetch = entityManager.find(Student.class, id);
	
	
	--->
	Hibernate / JPA uses JDBC for all DB Communications
	-> In Spring boot , Hibernate is the default implementation of JPA
	->EntityManager is the main component for creating the queries etc from JPA
	-> Bases on config, Spring boot will automatically creates the Beans of DataSource , EntityManager
	-> This we can inject in DAO class
	===> Here DB Driver and Spring JPA depedencies reuired
	As when we add Spring JPA, it automatically create the bean of DataSource , which required some input that will taken auto from prop file 
	Note: No need to give JDBC driver name, as auto detected
	-> spring.datasource.url=
	-> spring.datasource.username=
	-> spring.datasource.password = 
	
	
	----> Command Line Runner , if we want to run some code in comman line ,then we have to add Command Line runner which will execute the code after all BEANS are created.
	
	in main class
	@SpringBootApplication
	public class CrunApp{
	
		public static void main(String[] args) {
			SpringApplication.run(CurnAppp.class,args);
		}
		
		@Bean
		public CommandLIneRunner commandLineRunner(String[ ] args){
			return runner -> {
				System.out.println("Hell to WORLD");
			}
		}
	
	}
	=====>
	JPA
	 1) Create a Entity CLass
		Must be Annotated with @Entity
		Must hava a public or protected no-argument construtor
		 The class can have others construtor
		 
		@Entity
		@Table(name="student") --> optional 
		public class Student { 
			@Id
			@Coloumn(name="id")
			@GeneratedValue(strategy=GenerationType.IDENTITY) --> manage by DB, no need to provide value
			private int id;
			
			@Coloumn(name="first_name")--> optional, if not provided then field will be same
			private String firstName;
			
			//No arg constructor
			
			//getter and setter method 
		
		}
		
		
		--> Generation Strategies
			GenerationType.AUTO  - pick an appropiate strategy for the particular database
			GenerationType.IDENTITY - Assing primary keys usind DB identity col
			GenerationType.SEQUENCE - Assing primary keys using a db Sequence
			GenerationType.TABLE - Assing primary keys using a underlying database tabe to ensure uniqueness
			
			We can provide custom generation strategy also
			create implementation of org.hibernate.id.IdentifierGenerator
			override the method  public Serializable generate(....)
			
		Data Access Object (DAO)
			-> Responsible for interfacing with the database
			-> This is a common design pattern
			
				App<-----> DAO <-----> DB
				
		save()
		findByid()
		findAll()
		findByLastName();
		update();
		delete();
		deleteAll();
		
		-> DAO needs a JPA EntityManager and EntityManager needs a DataSource 
		
		DOA  -> EntityManager -> DatSource-> DB
		
		
		
	2) Define DAO Interface
	  Define DAO implementation
	  Inject the EntityManager
	  update the main App
	  
	  -> @Transanctional -> Auto begin and end a transaction for you JPA code, No need to explicitly , neeed to add before the method in DaoImplt
	  
	  --> For Annotating DAO class, need to add @Repository Classes , its sub annotation of @Component
	  
			@Component------> @Repository   (Add to the DAO implementation)
				|
				|
				|
				V
			@RestController
	  
	  -> DAO interface
	  -----------------------
	  public interface StudentDAO{
	  
		void save(Student theStudent); 
		
		Student findById(Integer id);
		
		List<Student> findAll();
		
		void update(Student student);
		
		void delete(Integer id);
		
	  }
	  ------------------------------
	  ->  DAO Implementation
	  -----------------------------
	  @Repository
	  public class StutdnetDaoImpl implements StudetnDAO{
		
		private  EntityManager entityManager;
		@AutoWired             --> Constructor bases injection
		public StutdnetDaoImpl(EntityManager entityManager){
			this.entityManager = entityManager;
		}
		
		
		@Override
		@Transanctional
		public void save(Student student){
			entityManager.persist(student); --> save the Java Objec to DO
		}
	
		@Override  ---> No need of @Transanctional , as we are doing only query  --> 
		public void save(Integer id){
			entityManager.find(Student.class, id); --> save the Java Objec to DO
		}
		
		//Details below for JPQL
		@Override  ---> No need of @Transanctional , as we are doing only query  --> 
		public List<Student> findAll(Integer id){
			TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student",Student.class);  ---> Student is JPA Entity not Table name
			return theQuery.getResultList();
			
		@Override
		@Transanctional
		public void update(Student student){
			entityManager.merge(theStudent);
		}
	
		@Override  
		@Transanctional
		public void delete(Integer id){
			Student theStudent = entityManager.find(Student.class, id); --> save the Java Objec to DO
			entityManager.remove(theStudent);
		}
	
	  }
	  ---------------------------------------
	  For testing, we can test in commandLineRunner like below
	  @Bean
		public CommandLIneRunner commandLineRunner(StudnetDAO studentDao){  --> Injection of studentDao
			return runner -> {
				createStudnet(studentDao);
			}
		}
		
		public void createStudnet(StudnetDAO studentDao)
		{
			Student tempStudent = new Student("paul" "jaul" , "ss");
			
			studentDao.save(tempStudent);
			
			System.out.println("Saved and Generated id " + tempStudent.getId());
		
		}
		
		
=========>>JPA Query Language (JPQL)
			-> QUery Language for retrieving objects, similiar with SQL - where like order by join in exclude
			
		Eg. Retrieving all students
		
		TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student",Student.class);  ---> Student is JPA Entity not Table name
		List<Student> students = theQuery.getResultList();
	 
			Retrieving student based on Lastname 
		TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student where lastName like 'DOE' ",Student.class);  ---> Student is JPA Entity not Table name and lastName is field name not table coloumn name
		List<Student> students = theQuery.getResultList();
		
		USING with Variable take called as "Named Parameters
		
		Eg.  
		public List<Student> findByLastName(String theLastName){
			TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student where lastName like :theData ",Student.class);  --->
			theQuery.setParameter("theData", theLastName);
			
			return theQuery.getResultList();
			
		}
		
		
=======> Updating an Object through JPA
		First Find the object to update and then update
			Student theStudent = entityManager.find(Student.class,1);
					theStudent.setFirstName("Loo");

		public void update(Student theStudent){	
			entityManager.merge(theStudent);
			}
			
======> Update multiple rows or all
		int numRowsUdated = entityManager.createQuery("UPDATE Student SET lastName='Tester'").executeUpdate();
		
		
======>Deleting Object
		entityManager.remove(theStudent);
		
		--> multple based on where condition
		int numRowsUdated = entityManager.createQuery("DELETE FROM Student where lastName ='SMITH'").executeUpdate();
		
		
		
=========================
	Create the Table with Java Code
		JPA/Hibernate create the SQL and execute in DB and create the Table
		
		Need to add below prop in application.properties file
		spring.jpa.hibernate.ddl-auto=create  
		
			options :
				none --> No Action
				create-only --> DB tables are only created
				drop --> db tables are droped
				create --> DB tables droped and recreate the table
				create-drop -> DB tables droped and recreate the table and on appliation shutdown ,drop the database tables
				validate -> validate the tables schema
				update -> udpate the db tables schema
		
		> Log SQL Statments
		logging.level.org.hibernate.SQL=debug
		->log sql statement value 
		logging.level.hibernate.orm.jdbc.bind=trace
		
==========================

		
		
		
	REST APIs Services --> Representational State Transfer




==========================

		HTTP Request/Response Messages-->
			Request/Response Line
			Header Variables
			Message Body
		
		HTTP Response - Status Codes
		 100-199 -> Informational
		 200-299 -> Successfull
		 300-399 -> Redirection
		 400-499 -> client error
		 500-599 -> Server error
		 
		 MIME Content Type (Multpurpose Internet Mail-Extension)
		  The message format is described by MIMI Content Type
		  Basic Syntax : type/sub-type
		  
		  Eg. text/html  ,  text/plain
			application/json , application/xml
			
			jsonplaceholder.typicode.com
	

 ----> Add Depedency for Spring Boot Starter Web 
	 
		@ResController
		@ReqestMapping("/test")
		public class RestService{
		
		@GetMapping("/hello")
		public String test(){
			return "hell to world";
			}
			
		$GetMapping("/student/{studentId}")
			public Student test(@PathVariable int StudentId){ --> parameter should match to pathVariable
					//Do some code to fetch and return 
					return  null;
			}
		
		
		}
---> Java JSON Data Binding
	Data binding is the process of converting JSON data to Java POJO (known as Serialization )
		Spring uses Jackson project 
		
		
		---> JSON to Java POJO  --> it call setter methods on POJO
		---> Java POJO to JSON - > it call getter methods on Pojo
		
	
		Spring handles jackson automatically in Rest Services


====> Spring Rest Services Excpetion Handling
		-> Create a Custom error response class
		-> Create a custom exception class
		-> Udate Rest Service to throw exception if object not found
		-> Add an Exception handler method using @ExceptionHandler
		
		
		1) CUSTOM ERROR Class
		public class StudentErrorResponse{
		
			private int status;
			private String message;
			private long timeStamp;
			
			//Constructor
			//getters and setters
		
		}	
		
		2) Create custom student Exception
		 public class StudentNotFoundExcpetion extends RuntimeExcpetion {
			public StudentNotFoundExcpetion(String message) {
			  super(message);
			}
		 }

		3) Updating Rest Service to throw Exception
					
			$GetMapping("/student/{studentId}")
			public Student test(@PathVariable int StudentId){ --> parameter should match to pathVariable
					//Do some code to fetch and return 
					if ( check student exist or not , if not exist) {
					{
							throw new StudentNotFoundExcpeption("Student id not found " + studentID);
					}
					return  null;
			}
			
		
		4)  Inside RestController class , we have to handle the throw expception, provide the proper response
		
			@ExcpetionHandler
			public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundExcpeption exc) {
				StudentErrorResponse error  = new StudentErrorResponse() ; --> this is the pojo class createQuery
				error.setStatus(HttpStatus.NOT_FOUND.value());
				error.setMessage(exc.getMessage());
				error.setTimeStamp(System.currentTimeMillis());
				
				return new ResponseEntity<>(error,HttpStatus.NOT_FOUND);--> error is body
			
			}

			//Catching any Exception if thrown
			@ExcpetionHandler
			public ResponseEntity<StudentErrorResponse> handleException(Excpetion exc) {
				StudentErrorResponse error  = new StudentErrorResponse() ; --> this is the pojo class createQuery
				error.setStatus(HttpStatus.BAD_REQUEST.value());
				error.setMessage(exc.getMessage());
				error.setTimeStamp(System.currentTimeMillis());
				
				return new ResponseEntity<>(error,HttpStatus.BAD_REQUEST);--> error is body
			
			}
			
			
=====> Global Exception handle for handling exception that code can be reused
	--> @ControllerAdvice  -> similiar to an intercpetor/ filter
	--> Pre-Process quests to controllers
	--> Post-process response to handle exception
	--> Perfect for global exception handling
	Real time use of AOP
	
	Currenly we have addeded the code for catching exception in same ResController, that can not be used by any other controller
	
	
	Rest Client  -------> ControllerAdvice[Contains ExceptionHandler] <------> Rest Service (if excpetion need to throw, it will send to ControllerAdvice
	
	1) Create new @ControllerAdvice
	2) Add that code of Rescontroller exception handling to controllerAdvice


	@ControllerAdvice
	public class StudentRestExceptionHanlder{
		
			@ExcpetionHandler
			public ResponseEntity<StudentErrorResponse> handleException(StudentNotFoundExcpeption exc) {
				StudentErrorResponse error  = new StudentErrorResponse() ; --> this is the pojo class createQuery
				error.setStatus(HttpStatus.NOT_FOUND.value());
				error.setMessage(exc.getMessage());
				error.setTimeStamp(System.currentTimeMillis());
				
				return new ResponseEntity<>(error,HttpStatus.NOT_FOUND);--> error is body
			
			}

			//Catching any Exception if thrown
			@ExcpetionHandler
			public ResponseEntity<StudentErrorResponse> handleException(Excpetion exc) {
				StudentErrorResponse error  = new StudentErrorResponse() ; --> this is the pojo class createQuery
				error.setStatus(HttpStatus.BAD_REQUEST.value());
				error.setMessage(exc.getMessage());
				error.setTimeStamp(System.currentTimeMillis());
				
				return new ResponseEntity<>(error,HttpStatus.BAD_REQUEST);--> error is body
			
			}
		
	}

	




---------------=======================

SERVICE



@Service Annotation:

	Service Facade Design pattern
	Intermediate layer for custom business logic
	Integrate data from multiple sources (DAO/repositoried)
	
	REST Controller <<------>> Services <<------->> DAO  <<----->> DB
	
	In services, we can multiple method of DAO and do some business logic which we return to Rest controller
	
	
	@Commponet <<---------------@Service 
	
	
	1-> Define Service Interface
	2-> Implement it
	
	public interface EmployeeService {
		
		List<Employee> findAll();
	}

	
	
	@Service
	public class EmployeeServiceImpl implements EmployeeService{
	
		//inject Employee DAO
		
		@Override
		List<Employee> findAll(){
		
			return employeeDao.findAll();
		}
	
	}

	
	
	IMPORTANT-->
	--> Best practice is to apply transactional boundaries at the Service layer
	--> it is the service layer's responsibility to manage transaction boundaries
	--> Add @Transanctional on service method and remove from DAO methods
	
	Note: Add or Update
	
	public Employee save(Employee theEmployee){
		Employee dbEmployee = entityManager.merge(theEmployee);--> if id is zero(manual setting in RestController) then save/insert else update
		
		return dbEmployee;
	
	}


	@PutMapping("/employee")
	public Employee updateEmployee(@RequestBody Employee theEmployee){
	
		Employee dbEmployee = employeeService.save(theEmployee);
		
		return dbEmployee;
	
	}


	@DeleteMapping("/employee/{employeeId}")
	public String deleteEmployee(@PathVariable int employeeId){
	
		Employee tempEmp = employeeService.findById(employeeId);
		if(tempEmp ==null)
		 {
			throw new RuntimeExcpetion("Emp id not found");
		 }
		employeeService.deleteById(employeeId);
		
		return "deleted";
	}




==================================================


Spring DATA JPA 

	--> As we have create DAO Layer, We have directly given Entity Type , which can not be used by another entity as most of the code are same
	
	--> Spring Data JPA provides the interface : JpaRepository
		which exposes methods like findAll() , findById() , save() ,deleteByid() etc
		
	--> In this way, we have to provide entity type and primary type , it auto create the DOA interface
	
	Method===>
	
		1) Extent JpaRepository interface
		2) Use our Repository in our app; (No need for implementation)
	
	================OLD METHOD
	
	 -> DAO interface
	  -----------------------
	  public interface StudentDAO{
	  
		void save(Student theStudent); 
		
		Student findById(Integer id);
		
		List<Student> findAll();
		
		void update(Student student);
		
		void delete(Integer id);
		
	  }
	  ------------------------------
	  ->  DAO Implementation
	  -----------------------------
	  @Repository
	  public class StutdnetDaoImpl implements StudetnDAO{
		
		private  EntityManager entityManager;
		@AutoWired             --> Constructor bases injection
		public StutdnetDaoImpl(EntityManager entityManager){
			this.entityManager = entityManager;
		}
		
		
		@Override
		@Transanctional
		public void save(Student student){
			entityManager.persist(student); --> save the Java Objec to DO
		}
	
		@Override  ---> No need of @Transanctional , as we are doing only query  --> 
		public void save(Integer id){
			entityManager.find(Student.class, id); --> save the Java Objec to DO
		}
		
		//Details below for JPQL
		@Override  ---> No need of @Transanctional , as we are doing only query  --> 
		public List<Student> findAll(Integer id){
			TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student",Student.class);  ---> Student is JPA Entity not Table name
			return theQuery.getResultList();
			
			}
		@Override
		@Transanctional --> Bad Practice
		public void update(Student student){
			entityManager.merge(theStudent);
		}
	
		@Override  
		@Transanctional--> Bad Practice
		public void delete(Integer id){
			Student theStudent = entityManager.find(Student.class, id); --> save the Java Objec to DO
			entityManager.remove(theStudent);
		}
	
	  }
	  
	 =============== NEW Method
	 
	 
	 public interface EmployeeRepository extends JpaRespository<Employee, Integer> {
	 
			//no need to extra code by default basic methods will be there
	 }
	 
	 
	 ================================
	 Now we can use it directly in service layer
	 
	 
	 @Service
	 public class EmployeeServiceImpl implements EmployeeService {
	 
		private EmployeeRepository employeeRepository;
		
		@Autowired
		public EmployeeServiceImpl(EmployeeRepository theEmpRep){----> Constructor Injection
			employeeRepository = theEmpRep;
		}
		
		@override
		public LIst<Employee> findAll() {
			return employeeRepository.findAll(); ----> Direct use , as JPA Repository auto fetch the data
		}
		
		@override
		public Empoyee findByid(int id) {
			Optional<Employee> result = employeeRepository.findByid(id); ---> check for null values
			Employee emp= null;
			if(result.isPresent){
				emp = result.get();
			}else{
			
				throw new RuntimeExcpetion("Did not found the emp id");
			}
			return emp;
		}
		
	 }
	 
	 ==========================
	 Advanced features availaible for 
		extendin and adding custom queries with JPQL 
		query domain specify Language(Query DSL)
		Defining custom methods
		
	========
	
	
	
=====================================================
	
	Spring DATA Rest  same like Spring Data Jpa.
	
	As we have several entity , we want to create crud Rest API, we hava to write same code again and again .We can use Spring Data Rest that provides the basic Crud Rest Api for any entity
	
	Spring Data Rest auto provide below  HTTP endpoints
	
	POST    /entity -> new create
	GET 	/entity   -> fetch All
	GET     /entity/{id}  -> findById
	PUT     /entity/{id} -- update particulare id
	DELETE  /entity/{id}
	
	By Default, it will create endpoints based on tentiy ty[each
	-> add "s" at end of entity (plural form) 
	
		if we need to provide custom then add below annotation in jpaRepository
			@RepositoryRestResource(path="members")
	
	Add Spring Data Rest in POM XML  and auto exposes endpoints for all JpaRepository created 
	
	-> HATEOS
		Spring data rest endpoints are HATEOS compliant ( Hypermedia as the engine of Application State)
		
		Hypermedia-driven sites provide information to access REST interfaces
		
	--> Advanced features like
		pagination, sorting and searching
		Extending and adding custom queries with JPQL , QDSL
		
		
		
	--> Giving custom enpoints
		spring.data.rest.base-path=/magic-api
		
		
====== Pagination
		By Default , page size is 20
		 employee?page=0
		 employee?page=1
		 
		 some properties 
		 spring.data.rest.base-path
		 spring.data.rest.default-page-size
		 spring.data.rest.max-page-size
		 
======Sorting
	employee?sort=lastName
	employee?sort=firstName,desc
	employee?sort=firstName,lastName,asc
	
	
	
============Example for using custom method  in Respository Rest Resource with different version
@RepositoryRestResource
public interface YourEntityRepository extends JpaRepository<YourEntity, Long> {

	@RestResource(path = "customEndpoint", rel = "custom")
    List<YourEntity> findByIp(@Param("paramName") String paramName);
							here method name defines the col name of the entity

    // Custom JPQL query method
    @Query("SELECT e FROM YourEntity e WHERE e.someField = :paramValue")
    List<YourEntity> findByCustomCriteria(@Param("paramValue") String paramValue);

    // Custom native SQL query method
    @Query(value = "SELECT * FROM your_entity_table WHERE some_column = :paramValue", nativeQuery = true)
    List<YourEntity> findByCustomNativeQuery(@Param("paramValue") String paramValue);

	@Query("SELECT e FROM YourEntity e WHERE LOWER(e.ip) LIKE %:ip%")
	List<YourEntity> findByIpIgnoreCaseContaining(@Param("ip") String ipAddress);

	@Query("SELECT e FROM YourEntity e WHERE LOWER(e.ip) LIKE %:ip%")  
    Page<YourEntity> findByIpIgnoreCaseContaining(   --> GET /yourEntities/search/findByIpIgnoreCaseContaining?ip=example&page=0&size=10&sort=id,asc
        @Param("ip") String ipAddress,
        Pageable pageable
    );

	for Above Custom Query,, method name become the endpoints

}

	GET /yourEntities/search/findByIpIgnoreCaseContaining?ip=example
